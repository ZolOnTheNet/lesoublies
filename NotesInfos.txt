item-profil-sheet.html
 {{#each system.idcmp as |item id|}}
    <hr>
      <label class="resource-label">Profil</label>
      <select name="system.idcmp.{{id}}">
        {{selectOptions LstTotCmps selected=item}}
    </select>
    {{/each}}
    ---------------------
    <label class="resource-label">Profil</label>
    <select name="system.idcmp.cmp1">
      {{selectOptions LstTotCmps selected=system.idcmp.cmp1}}
    </select>
    --------------------
    <select name="system.idcmp.{{id}}">
        {{selectOptions ./LstTotCmps selected=item}}
    </select>

    Exemple de dialogue :
    // EXEMPLE A Garder 
/**
 * Sets the form's inputs based on the selected preset.
 */
//  function handleFruitPreset(event) {
//   const targetElement = event.currentTarget;
//   const presetType = targetElement.dataset?.preset;

//   const formElement = $(targetElement).parents('form');

//   const nameInput = formElement?.find('[name="name"]'); <- a partir le "form", il cherche le control "name" puis "color"
//   const colorInput = formElement?.find('[name="color"]');

//   if (!presetType || !nameInput || !colorInput) {
//     return;
//   }

//   switch (presetType) {
//     case 'apple':
//       nameInput.val('Apple'); <- Modification HTML de la valeur !
//       colorInput.val('#ff0000');
//       break;

//     case 'banana':
//       nameInput.val('Banana');
//       colorInput.val('#ffff00');
//       break;

//     case 'orange':
//       nameInput.val('Orange');
//       colorInput.val('#ff7700');
//       break;

//     default:
//       throw new Error(`Unknown preset: ${presetType}`);
//       break;
//   }
// }

/**
 * Verify that all expected formData fields have values.
 */
// function verifyFruitInputs(formData) {
//   if (!formData?.name) {
//     throw new Error('Name is required');
//   }

//   if (!formData?.color) {
//     throw new Error('Color is required');
//   }
// }

/**
 * Prompt the user for traits they wish the created fruit to have.
 */
/*
 async function  promptForFruitTraits() {
  const htmlContent = await renderTemplate('systems/npqv1/templates/dialogue/handlebarsTemplate.hbs');

  return new Promise((resolve, reject) => {
    const dialog = new Dialog({
      title: "Fruit Traits",
      content: htmlContent,
      buttons: {
        submit: {
          label: "Create",
          icon: '<i class="fas fa-apple-alt"></i>',
          callback: (html) => {
            const formData = new FormDataExtended(html[0].querySelector('form'))
              .toObject();

            verifyFruitInputs(formData);

            resolve(formData);
          },
        },
        skip: {
          label: "Skip",
          callback: () => resolve(null),
        },
        cancel: {
          label: "Cancel",
          callback: () => reject('User canceled.'),
        },
      },
      render: (html) => {
        html.on('click', 'button[data-preset]', handleFruitPreset);
      },
      close: () => {
        reject('User closed dialog without making a selection.');
      },
    });

    dialog.render(true);
  });
}